@model Tengella.Survey.WebApp.Models.SendSurveyViewModel

@{
    ViewData["Title"] = "Send Email";
}

<h1>Survey - Send Survey Email</h1>

<form asp-controller="SurveyObjects" asp-action="MailSurveyToList" method="post">
    
    <input type="hidden" name="SurveyObjectId" value="@Model.SurveyObjectId" />
    <h4>Survey Title: @Model.SurveyTitle</h4>
    <h4>Survey Description: @Model.SurveyDescription</h4>
    <input type="hidden" name="SurveyTitle" value="@Model.SurveyTitle" />
    <input type="hidden" name="SurveyDescription" value="@Model.SurveyDescription" />
    <input type="text" name="Subject" placeholder="E-mail Subject" />
    <input type="text" name="Message" placeholder="E-mail Message" />
    <input type="text" name="SurveyLink" value="@Model.SurveyLink" />



    <h2>Email List</h2>
        

        <div id="users-container">
        
        
            @for (int j = 0; j < Model.Users.Count; j++)
            {
        <div id="user-@j">



                <input type="text" name="Users[@j].FirstName" placeholder="First Name" />
                <input type="text" name="Users[@j].LastName" placeholder="Last Name" />
                <input type="text" name="Users[@j].Email" placeholder="Email" />
                <input type="text" name="Users[@j].UserType" placeholder="User Type" />
                <input type="text" name="Users[@j].OrgNumber" placeholder="Org Number" />
                <input type="text" name="Users[@j].OrgName" placeholder="Org Name" />

        </div>
            }
    </div>


    <button type="button" onclick="addUserRecipient()">Add User</button>
    <button type="submit">Send to Users</button>
    <button type="button" onclick="showSurveyPreview()">Preview Survey</button>

    
</form>


<div id="previewModal" class="modal">
    <div class="modal-content">
        <span class="close" onclick="closeModal()">&times;</span>
        <h2>Survey Preview</h2>
        <div id="surveyPreviewContent">
            
        </div>
    </div>
</div>

<script>
    var userIndex = @Model.Users.Count;

    function addUserRecipient() {
        const usersContainer = document.getElementById('users-container');
        const userDiv = document.createElement('div');
        userDiv.id = `user-${userIndex}`;
        userDiv.classList.add('user-entry');

        const newUserUserId = document.createElement('input');
        newUserUserId.type = 'hidden';
        newUserUserId.name = `Users[${userIndex}].UserId`;

        const newUserFirstName = document.createElement('input');
        newUserFirstName.type = 'text';
        newUserFirstName.name = `Users[${userIndex}].FirstName`;
        newUserFirstName.placeholder = 'First Name';

        const newUserLastName = document.createElement('input');
        newUserLastName.type = 'text';
        newUserLastName.name = `Users[${userIndex}].LastName`;
        newUserLastName.placeholder = 'Last Name';

        const newUserEmail = document.createElement('input');
        newUserEmail.type = 'text';
        newUserEmail.name = `Users[${userIndex}].Email`;
        newUserEmail.placeholder = 'Email';

        const newUserUserType = document.createElement('input');
        newUserUserType.type = 'text';
        newUserUserType.name = `Users[${userIndex}].UserType`;
        newUserUserType.placeholder = 'User Type';

        const newUserOrgNumber = document.createElement('input');
        newUserOrgNumber.type = 'text';
        newUserOrgNumber.name = `Users[${userIndex}].OrgNumber`;
        newUserOrgNumber.placeholder = 'Org Number';

        const newUserOrgName = document.createElement('input');
        newUserOrgName.type = 'text';
        newUserOrgName.name = `Users[${userIndex}].OrgName`;
        newUserOrgName.placeholder = 'Org Name';

        userDiv.append(newUserUserId, newUserFirstName, newUserLastName, newUserEmail, newUserUserType, newUserOrgNumber, newUserOrgName);
        usersContainer.appendChild(userDiv);
        userIndex++;
    }
</script>

<script>
    function showSurveyPreview() {
        const previewModal = document.getElementById('previewModal');
        const previewContent = document.getElementById('surveyPreviewContent');

        // Clear previous content
        previewContent.innerHTML = '';

        // Fetch survey data from the form
        const surveyTitle = document.querySelector('input[name="SurveyTitle"]').value;
        const surveyMessage = document.querySelector('input[name="SurveyDescription"]').value;

        // Fetch questions from the model
        const questions = @Html.Raw(Json.Serialize(Model.AddChoice.Questions));

        // Populate the preview content
        previewContent.innerHTML += `<h3>${surveyTitle}</h3>`;
        previewContent.innerHTML += `<p>${surveyMessage}</p>`;

        previewContent.innerHTML += `<h4>Questions</h4>`;
        questions.forEach((question, qIndex) => {
            previewContent.innerHTML += `<div><strong>Q${qIndex + 1}: ${question.questionName}</strong></div>`;

            if (!question.questionChoices || question.questionChoices.length === 0) {
                console.error(`QuestionChoices is undefined for question: ${JSON.stringify(question)}`);
                previewContent.innerHTML += `<div style="color: red;">Error: No choices available for this question</div>`;
                return;
            }

            question.questionChoices.forEach((choice, cIndex) => {
                previewContent.innerHTML += `<div>&nbsp;&nbsp;${String.fromCharCode(65 + cIndex)}. ${choice.choiceText}</div>`;
            });
            previewContent.innerHTML += '<hr>';
        });

        // Show the modal
        previewModal.style.display = 'block';
    }

    function closeModal() {
        const previewModal = document.getElementById('previewModal');
        previewModal.style.display = 'none';
    }

    // Close the modal when the user clicks outside of it
    window.onclick = function (event) {
        const previewModal = document.getElementById('previewModal');
        if (event.target == previewModal) {
            previewModal.style.display = 'none';
        }
    }
</script>